{"version":3,"sources":["components/TableHead.jsx","components/tableComponents/Name.jsx","components/tableComponents/Symbol.jsx","helpers/helpers.js","components/tableComponents/LogoPic.jsx","components/tableComponents/InvisibleMenu.jsx","components/tableComponents/Price.jsx","helpers/helperChart.js","components/tableComponents/Chart.jsx","components/tableComponents/Supply.jsx","components/tableComponents/MarketCap.jsx","components/tableComponents/Volume24h.jsx","components/tableComponents/PercentChange24h.jsx","components/tableComponents/InvisibleMenuTwo.jsx","components/TableBody.jsx","components/Table.jsx","components/Pagination.jsx","App.js","serviceWorker.js","index.js"],"names":["TableHead","className","id","Name","name","Symbol","symbol","dateTimeConvert","input","convertTime","toString","day","slice","time","toFixedTwo","Math","floor","toFixed","splitEveryThreeDigit","splitted","split","divider","length","count","countTwo","result","i","numberType","LogoPic","logoPic","src","alt","InvisibleMenu","Price","props","state","price","this","console","log","$numberDecimal","arrFromInput","numbersAfterHundreds","nextProps","prevState","Component","chartDataHelper","arr","nth","priceAndTimeData","nthNumber","filter","e","map","el","push","concat","LineChart","chartData","data","width","height","loader","chartType","options","backgroundColor","colors","lineWidth","axes","x","0","side","chartArea","hAxis","textPosition","baselineColor","ticks","vAxis","scaleType","Supply","circulating_supply","symbolCurrency","MarketCap","market_cap","volume_24h","PercentChange24h","percent_change_24h","InvisibleMenuTwo","inputVol","inputCap","TableBody","currentCoins","tableVisibility","chartBodyMap","coin","key","_id","price_time","Table","App","coins","starts","hasMore","counter","componentDidMount","loadCoins","setInterval","a","loadMore","updateCoins","hasMoreHelper","setState","isReadyLoad","next","dataLength","url","fetch","cache","response","json","dataJSON","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bb2f389.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TableHead = () =>  ( \n        \n    <thead className='title_table gradVertical textShadowBlue'>\n        <tr >\n            <th id='logo_title' className='headTopBorder headLeftBorder percentLogo'></th>\n\n            <th id='symbol_title ' className='centerText headTopBorder percent-9'>Symbol</th>\n\n            <th id='name_title' className='centerText headTopBorder percent-13'>Name</th>\n\n            <th id='invisible_title' className='headTopBorder '>\n                Symbol <br/>\n                Name   </th>\n\n            <th  className='headTopBorder centerText percent-13'>Price USD</th>\n\n            <th  className='headTopBorder centerText percent-9'>Change 24h</th>\n\n            <th id='chart_title' className='headTopBorder centerText chartHead chart-size'>Seven Days</th>\n\n            <th id='invisible_two_title' className='headTopBorder'>\n                Volume 24h <br/>\n                Market Cap </th>\n\n            <th id='volume_24h_title' className='headTopBorder centerText percent-13'>Volume 24h</th>\n\n            <th id='market_cap_title' className='headTopBorder centerText percent-13'>Market Cap</th>\n            \n            <th  id='supplyTitle' className='headTopBorder headRightBorder percent-13'>Supply</th>\n        </tr>\n    </thead>  \n);\n\n","import * as React from 'react';\n\n\n\nexport const Name = ({ name }) => (     \n\n     <td className='name dark_grey_text white_BG borderBottom centerText elHover_name'  id='name'>\n\n          { name }\n\n     </td>\n);\n\n\n\n ","import * as React from 'react';\n\n\n\nexport const Symbol = ({ symbol }) => (\n     \n     <td id='symbol' \n         className='text_bold symbol gradBG centerText \n                    textShadowGrey white_text text_bold \n                    headRightBorderGrey elHover_symbol'  > \n\n          { symbol }\n\n     </td>\n);\n\n\n\n","export function dateTimeConvert(input) {\n\n      let convertTime = input.toString();\n\n      let day = convertTime.slice(0, 10);\n      let time = convertTime.slice(11, 19);\n\n      let result = `${day} ( ${time} )`\n\n      return result;\n};\n\nexport function toFixedTwo(input) {\n\n      let num = Math.floor(input * 100) / 100;\n      return num.toFixed(2)\n};\n\nexport function numbersAfterHundreds(input) {\n\n      // check this\n      if ( input === 0 ) {\n            return 0;  \n      }\n\n      let arrFromInput = ('' + input).split('.');\n      let splitted = ' ' + (arrFromInput[1].slice(2, arrFromInput[1].length));\n\n      return splitted;\n};\n\nexport function splitEveryThreeDigit(input) {\n\n      let arrFromInput = ('' + input).split('.');\n      let splitted = arrFromInput[0].split('');\n\n      let divider = splitted.length % 3;\n\n      let count    = 0;\n      let countTwo = 0;\n      let result   = '';\n\n      if (divider === 0) {\n            count = 0\n      };\n      if (divider === 1) {\n            count = 2\n      };\n      if (divider === 2) {\n            count = 1\n      };\n\n      for (let i = 0; i < splitted.length; i++) {\n            count++;\n            countTwo++;\n\n            result += splitted[i];\n\n            if (count === 3) {\n                  if (countTwo === splitted.length) {\n                        break;\n                  } else {\n                        result += ',';\n                        count = 0;\n                  }\n            };\n      }\n      return result;\n};\n\nexport function numberType(input) {\n\n      let splitted = ('' + input).split('.');\n      let result = '';\n\n      if (splitted[0].length > 9) {\n            result = ' Bn.';\n      } else if (splitted[0].length > 6) {\n            result = ' mil';\n      }\n      return result;\n};\n\nexport function percentageColor(input) {\n\n      if (+input >= 0) {\n            return 'green-text';\n      }\n      return 'tomato-text';\n};\n\nexport function logoPicture(input) {\n\n      let pic =` https://s2.coinmarketcap.com/static/img/coins/128x128/${input}.png`;\n      return pic\n};\n\nexport async function componentDidMount () {\n      try {\n            setInterval(async () => {\n       \n                  await this.update()\n                  \n            }, 60000);\n      } catch(e) {\n            console.log(e);\n      }\n}\n\n\n\n\n\n// export function chartDataHelper(input) {\n      \n//       let arrHead = [\n//             ['', 'Price USD']\n//       ];\n\n//       let priceAndTimeData = [];\n\n//       const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n      \n//       let nthNumber = 6;\n\n//       if (input.length < 13) {\n//             nthNumber = 1;\n//       }\n\n//       everyNthNum( input, nthNumber ).map( (el) => (\n            \n//             priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n//       ));\n      \n//       return  arrHead.concat(priceAndTimeData);\n// };","import * as React      from 'react';\nimport { logoPicture } from '../../helpers/helpers';\n\n\n\nexport const LogoPic = ({ logoPic }) => (\n\n     <td id='logo' className='logo LeftBorder greyLightBG white_text picLogoHeight percentLogo' >\n\n          <img id='innerLogo' src={ logoPicture(logoPic) } alt='coin' />\n          \n     </td>\n);\n\n\n\n\n\n\n\n\n","import * as React   from 'react';\n\n\nexport const InvisibleMenu = ({symbol, name}) => \n(\n     <td id='invisible' className='borderBottom white_BG'>\n\n          <span> </span>\n\n          <span className='greyBlue_text text_bold'>\n\n               { symbol }\n\n          </span>\n          \n     <br/>\n\n          <span className='grey_text name'>{ name }</span>\n\n     </td>\n);\n\n","import * as React   from 'react';\nimport  {Component} from 'react';\nimport { numbersAfterHundreds, toFixedTwo } from '../../helpers/helpers';\n\n\nexport default class Price extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n              price : [] \n          }\n     }\n\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return {price: nextProps.input };\n     }\n     else return null;\n\n}\n     \n     render() {\n\n          const {price } = this.state;\nconsole.log(price[0])\n          return ( \n               <td className='centerText purple_text bold_text borderBottom white_BG elHover'>\n\n                    <span className='superSmall grey_text'>&#36;</span>\n\n                         { toFixedTwo(price[0].$numberDecimal) }\n                         {/* { (price[0].$numberDecimal) } */}\n                    \n                    <span className='superSmallPrice'>\n\n                         { numbersAfterHundreds(price[0].$numberDecimal )}\n                         {/* { (price[0].$numberDecimal )} */}\n\n                    </span>\n\n               </td>\n          );\n     }\n}\n\n\n\n\n\n\n// import * as React   from 'react';\n// import  {Component} from 'react';\n// import { numbersAfterHundreds, toFixedTwo } from '../../helpers/helpers';\n\n\n \n\n// export default class Price extends Component {\n//      constructor(props){\n//           super(props);\n\n//           this.state = {\n//               price : [{}]\n//           }\n//      }\n\n// static getDerivedStateFromProps( nextProps, prevState ) {\n//      if (nextProps.input !== prevState.input) {\n           \n//            return {price: nextProps.input };\n//      }\n//      else return null;\n// }\n\n        \n//      render() {\n\n//           const {price } = this.state;\n\n//           return (\n//                <td className='centerText purple_text bold_text borderBottom white_BG'>\n\n//                     <span className='superSmall grey_text'>&#36;</span>\n\n//                          { toFixedTwo(price[price_time.length - 1].price ) }\n                    \n//                     <span className='superSmallPrice'>\n\n//                          { numbersAfterHundreds(price[price.length - 1].price )}\n\n//                     </span>\n\n//                </td>\n//           );\n//      }\n// }\n\n\n// import * as React   from 'react';\n// import  {Component} from 'react';\n// import { numbersAfterHundreds, toFixedTwo } from '../../helpers/helpers';\n\n \n\n// export default class Price extends Component {\n//      constructor(props){\n//           super(props);\n\n//           this.state = {\n//                price_time : [{}]\n//           }\n//      }\n\n// static getDerivedStateFromProps( nextProps, prevState ) {\n//      if (nextProps.input !== prevState.input) {\n           \n//            return { price_time: nextProps.input };\n//      }\n//      else return null;\n// }\n\n        \n//      render() {\n\n//           const { price_time } = this.state;\n\n//           return (\n//                <td className='centerText purple_text bold_text borderBottom white_BG'>\n\n//                     <span className='superSmall grey_text'>&#36;</span>\n\n//                          { toFixedTwo( price_time[price_time.length - 1].price  ) }\n                    \n//                     <span className='superSmallPrice'>\n\n//                          { numbersAfterHundreds( price_time[ price_time.length - 1].price )}\n\n//                     </span>\n\n//                </td>\n//           );\n//      }\n// }","\nimport { dateTimeConvert } from './helpers';\n\n\nexport function chartDataHelper(input) {\n   \n      let arrHead = [\n            ['', 'Price USD']\n      ];\n\n      \n\n      let priceAndTimeData = [];\n\n      const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n      \n      let nthNumber = 1; // 6\n\n      if (input.length < 13) {  nthNumber = 1; };\n\n\n      everyNthNum( input, nthNumber ).map( (el) => (\n            \n            priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n      ));\n      \n      return  arrHead.concat(priceAndTimeData);\n};","\n\n\nimport * as React          from 'react';\nimport { Component }       from 'react';\nimport { Chart }           from 'react-google-charts';\nimport { chartDataHelper } from '../../helpers/helperChart';\n\n\n\n\nexport default class LineChart extends Component {\n      constructor(props) {\n            super(props);\n\n            this.state = {\n                  chartData       : [] ,\n                  // chartData : props.chartData\n            }\n      }\n\n      // static getDerivedStateFromProps( nextProps, prevState ) {\n      //       if (nextProps.chartData !== prevState.chartData) {\n                  \n      //             return { chartData: nextProps.chartData };\n      //       }\n      //                         if (nextProps.input !== prevState.input) {\n                  \n      //                               return { chartData: nextProps.input };\n      //                         }\n            \n      //       else return null;\n\n            static getDerivedStateFromProps( nextProps, prevState ) {\n                  if (nextProps.input !== prevState.input) {\n            \n                        return { chartData: nextProps.input };\n                  }\n                  else return null;\n      }\n\n      render() {\n\n            const { chartData } = this.state;\n\n\n            return (\n                  <div className='borderBottom elHover chart'>\n                        <div >\n                              <td id ='chart' className=' white_BG'>  \n                                    <Chart\n                                          data      =  {chartDataHelper(chartData)}\n                                          width     =  {'160px'}\n                                          height    =  {'52px'}\n                                          loader    =  {<div className='ultraSmall'></div>}\n                                          chartType =  'LineChart'\n                                          options   =  {{\n                                                backgroundColor: 'none',\n                                                colors: ['rgb(124, 67, 255)'],\n                                                lineWidth: 1,\n                                                axes: {\n                                                      x: {\n                                                            0: { side: 'top' }\n                                                      }\n                                                },\n                                                chartArea: {\n                                                      width: '150%',\n                                                      height: '175%'\n                                                },\n                                                hAxis: {\n                                                      textPosition: 'none',\n                                                      baselineColor: 'none',\n                                                      ticks: []\n                                                },\n                                                vAxis: {\n                                                      textPosition: 'none',\n                                                      baselineColor: 'none',\n                                                      ticks: [],\n                                                      scaleType: 'Linear'\n                                                }\n                                          }\n                                    }/>\n                              </td>\n                        </div>\n                  </div>\n            );\n      }\n}\n","import * as React   from 'react';\nimport  {Component} from 'react';\n\nimport { splitEveryThreeDigit } from '../../helpers/helpers';\n\n\n\nexport default class Supply extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               circulating_supply : 0,\n               symbol: props.symbolCurrency || 'hide'\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { circulating_supply: nextProps.input };\n     }\n     else return null;\n}\n          render() {\n\n               const { circulating_supply, symbol } = this.state;\n\n               return (\n                    <td id='supply' className='borderBottom white_BG elHover_num'>\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(circulating_supply) }</span>\n\n                              <span> </span>\n\n                         <span className='superSmall grey_text white_BG'>{ symbol }</span> \n\n                    </td>\n               );\n     }\n}\n","import * as React  from 'react';\nimport {Component} from 'react';\n\nimport { numberType, \n         splitEveryThreeDigit } from '../../helpers/helpers';\n\n\n         \nexport default class MarketCap extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               market_cap : 0\n          }\n     }\n     \nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { market_cap: nextProps.input };\n     }\n     else return null;\n}\n    \n     render() {\n\n          const { market_cap } = this.state;\n\n          return (\n               <td className='borderBottom centerText white_BG elHover_num' id='market_cap'>\n\n                    { <span className='superSmall grey_text'>&#36;</span> }\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(market_cap) } </span>\n\n                    { <span className='superSmall grey_text'>{ numberType(market_cap) }</span> }\n\n               </td> \n          );\n     }\n}\n","import React, { Component } from 'react';\n\nimport { splitEveryThreeDigit, \n         numberType } from '../../helpers/helpers';\n\n \n         \nexport default class MarketCap extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               volume_24h : 0,\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { volume_24h: nextProps.input };\n     }\n     else return null;\n}\n        \n     render() {\n\n          const { volume_24h } = this.state;\n\n          return (\n               <td id='volume_24h' className='borderBottom centerText white_BG elHover_num'>\n\n                    <span className='superSmall grey_text'>&#36;</span>\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(volume_24h) }</span>\n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(volume_24h) }\n\n                    </span>\n                    \n               </td>\n          );\n     }\n}\n","import * as React   from 'react';\nimport  {Component} from 'react';\n\nimport { percentageColor, \n         toFixedTwo } from '../../helpers/helpers';\n\n \n         \nexport default class PercentChange24h extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               percent_change_24h : 0\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { percent_change_24h: nextProps.input };\n     }\n     else return null;\n}\n    \n     render() {\n\n          const { percent_change_24h } = this.state;\n\n          return (\n\n               <td className='centerText bold_text borderBottom white_BG elHover'  > \n\n                    <span className={ percentageColor(percent_change_24h) }>\n                                    {      toFixedTwo(percent_change_24h) }</span>\n\n                    <span className='superSmall grey_text'>%</span>\n\n               </td>\n          );\n     }\n}","import * as React    from 'react';\nimport { Component } from 'react';\n\nimport { splitEveryThreeDigit,  numberType } from '../../helpers/helpers';\n\n\n\nexport default class InvisibleMenuTwo extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               volume_24h : 0,\n               market_cap : 0\n          }\n     }\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.inputVol !== prevState.inputVol) {\n           \n          return { \n\n               volume_24h: nextProps.inputVol ,\n               market_cap : nextProps.inputCap\n          };\n     }\n     else return null;\n}\n     \n     render() {\n\n          const { volume_24h, market_cap } = this.state;\n\n          return (\n               <td id='invisible_two'  className='borderBottom white_BG'>\n                   \n                    <span className='small'></span>\n\n                    <span className='superSmall grey_text'>&#36;</span> \n\n                         { splitEveryThreeDigit(volume_24h) }\n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(volume_24h) }</span>\n\n                    <span className='small'></span>\n                         <br/>\n                    <span className='superSmall grey_text'>&#36;</span>\n               \n                         { splitEveryThreeDigit(market_cap) } \n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(market_cap) }\n                   \n                    </span>\n               </td>\n          );\n     }\n}\n","import React             from  'react';\nimport { Component }     from  'react';\nimport { Name }          from  './tableComponents/Name';\nimport { Symbol }        from  './tableComponents/Symbol';\nimport { LogoPic }       from  './tableComponents/LogoPic';\nimport { InvisibleMenu } from  './tableComponents/InvisibleMenu'\nimport Price             from  './tableComponents/Price';\nimport Chart             from  './tableComponents/Chart';\nimport Supply            from  './tableComponents/Supply';\nimport MarketCap         from  './tableComponents/MarketCap';\nimport Volume24h         from  './tableComponents/Volume24h';\nimport PercentChange24h  from  './tableComponents/PercentChange24h';\nimport InvisibleMenuTwo  from  './tableComponents/InvisibleMenuTwo';\n\n\n\nexport default class TableBody extends Component{\n      \n      constructor(props){\n            super(props);\n  \n            this.state = {\n                  currentCoins   : props.input,\n                  tableVisibility: props.tableVisibility\n            }\n       }\n\n       static getDerivedStateFromProps( nextProps, prevState ) {\n\n             if (nextProps.tableVisibility !== prevState.tableVisibility) {\n\n                   return { tableVisibility: nextProps.tableVisibility };\n             }\n             if (nextProps.input !== prevState.input) {\n\n                   return { currentCoins: nextProps.input };\n             }\n\n             else return null;\n       }\n\n\n      render(){\n\n            const { currentCoins } = this.state;\n            \n            let chartBodyMap = currentCoins.map( coin => (\n                  \n                  <tr className='element'  key       =  { coin._id }>\n\n                        <LogoPic           logoPic   =  { coin.id } />\n\n                        <InvisibleMenu     symbol    =  { coin.symbol } name = { coin.name } />\n\n                        <Symbol            symbol    =  { coin.symbol } />\n\n                        <Name              name      =  { coin.name } />\n\n                        <Price            input    =  { coin.price } />\n\n                        <PercentChange24h  input     =  { coin.percent_change_24h } />\n\n                        <Chart             input     =  { coin.price_time } /> \n\n                        <Volume24h         input     =  { coin.volume_24h } />\n\n                        <InvisibleMenuTwo  inputVol  =  { coin.volume_24h }  inputCap = { coin.market_cap } />\n\n                        <MarketCap         input     =  { coin.market_cap } />\n\n                        <Supply            input     =  { coin.circulating_supply } symbolCurrency = { coin.symbol } />\n                  </tr>   \n            ))\n            return <tbody>{ chartBodyMap }</tbody>\n      }    \n}\n\n\n\n","import React          from 'react';\nimport { Component }  from 'react';\nimport { TableHead }  from './TableHead';\nimport TableBody      from './TableBody';\n\nexport default class Table extends Component{\n      \n\tconstructor(props){\n\t\t super(props);\n \n\t\t this.state = {\n\t\t\t  currentCoins    : props.input,\n\t\t\t  tableVisibility : props.tableVisibility\n\t\t }\n\t }\n\n static getDerivedStateFromProps( nextProps, prevState ) {\n\n\t if (nextProps.tableVisibility !== prevState.tableVisibility) {\n\n\t\t return { tableVisibility: nextProps.tableVisibility };\n\t }\n\t if (nextProps.input !== prevState.input) {\n\n\t\t return { currentCoins: nextProps.input };\n\t }\n\t else return null;\n }\n\n\trender(){\n\n          const { currentCoins, tableVisibility } = this.state;\n\t\t\n\t\treturn (\n\t\t\t<table>\n\n\t\t\t\t<TableHead />\n\n\t\t\t\t<TableBody input = { currentCoins } />\n\n\t\t\t</table>\n\t\t)\n\t}    \n}\n\n\n\n","import  * as React   from 'react';\nimport { Component } from 'react';\n\n\n\nexport default class Pagination extends Component {\n          constructor( props ) {\n               super( props );\n     \n               this.state = {\n                    paginate    : props.paginate,\n                    pageNumbers : props.pageNumbers,\n                    activeClass : props.currentPage\n               }\n          }\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.currentPage !== prevState.currentPage) {\n               \n               return { activeClass: nextProps.currentPage };\n     }\n     else return null;\n}\n          render() {\n               \n               const { paginate, pageNumbers, activeClass} = this.state;\n\n               return (\n                    <div className='pagination'>\n                         { pageNumbers.map( pageNumber => (\n                              <span key='number' >\n                                   \n                                   <a onClick = { () => paginate(pageNumber) } \n                                        href = '#' \n                                        className = {  activeClass        ===  pageNumber ? 'active'           : '' ||                   \n                                                       pageNumbers[0]     ===  pageNumber ? 'firstPage'        : '' ||\n                                                       activeClass - 2    ===  pageNumber ? 'lightTransparent' : '' ||\n                                                       activeClass - 1    ===  pageNumber ? 'prevPage'         : '' ||\n                                                       activeClass        ===  pageNumber ? 'active'           : '' ||\n                                                       pageNumbers.length ===  pageNumber ? 'lastPage'         : '' ||\n                                                       activeClass + 1    ===  pageNumber ? 'nextPage'         : '' || \n                                                       activeClass + 2    ===  pageNumber ? 'lightTransparent' : 'transparent'\n                                                       } >\n                                        { pageNumber }\n                                   </a>\n                              </span>  \n                         ))}\n                    </div>\n               )\n          }\n     }\n        \n\n          ","import React              from 'react';\nimport { Component }      from 'react';\nimport Table              from './components/Table';\nimport    Pagination      from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate'\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nexport default class App extends Component{\n     \n\tstate = {\n\t\tcoins       :  [],\n\t\tcount       :  16,\n\t\tstarts      :  0,\n\t\thasMore     :  true,\n\t\tcounter     :  0\n\t}\n\t\n\t\n\trender() {\n\t\t\n\t\tconst { count, coins, starts, hasMore, isReadyLoad } = this.state;\n\n\t\treturn (\n\n\t\t\t<div className='wrap'>\n\n\t\t\t\t<InfiniteScroll\n\t\t\t\t\tnext       =  { this.loadMore }\n\t\t\t\t\thasMore    =  { hasMore }\n\t\t\t\t\tdataLength =  { coins.length }\n\t\t\t\t\tloader     =  { <div>\n\t\t\t\t\t\t\t\t\t<h4 className='loading'>Loading...</h4>\n\t\t\t\t\t\t\t\t\t<div className='pagesNum'>{starts + count}</div>\n\t\t\t\t\t\t\t\t</div> }\n\t\t\t\t>\n\t\t\t\t\t<div className='table'>\n\t\t\t\t\t\t< Table  input = { coins } />\n\t\t\t\t\t</div>\n\n\t\t\t\t</InfiniteScroll>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\tcomponentDidMount = () => {\n\n\t\tthis.loadCoins();\n\t\t\n\t\t\n\t\tsetInterval(async () => {\n\n\t\t\t this.loadMore();\n\t\t\t this.updateCoins();\n\t\t\t \n\t\t}, 25000);\n\t}\n\t\n\n\tloadMore = () => {\n\n\t\tconst { starts, count } = this.state;\n\n\t\tlet hasMoreHelper = true;\n\t\tif ( starts >= 100 ) hasMoreHelper = false;\n\n\t\tthis.setState( ({\n\t\t\tstarts  : starts + count,\n\t\t\thasMore : hasMoreHelper,\n\t\t}))\n\n\t\tthis.loadCoins();\n\t\t// this.loadChart();\n\t\t\n\t}\n\t\n\tasync  loadCoins() {\n\n\t\t\tconst { coins, starts, count } = this.state;\n\t\t\tconst url = `/info?starts=${starts}&count=${count}`;\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); \n\t\t\tconst dataJSON = await response.json();\n\t\t\t\n\t\t\t// console.log(response.status);\n\n\t\t\tthis.setState({\n\t\t\t\tcoins : coins.concat(dataJSON),\n\t\t\t\t\n\t\t\t});\n\n\t\t\tconsole.log(coins)\n\t\t\tconsole.log('coins')\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\t\n\n\t// async loadChart() {\n\n\t// \tconsole.log('loadChart');\n\n\t// \t\tconst { coins , counter} = this.state;\n\t// \t\tconst url = '/instruments';\n\t// \ttry {\n\t// \t\tconst response = await fetch( url ); \n\t// \t\tconst dataJSON = await response.json();\n\n\t// \t\tif ( counter === 0 ) {\n\t// \t\t\tthis.setState({\n\t// \t\t\t\tcoins   : dataJSON,\n\t// \t\t\t\tcounter : counter + 1\n\t// \t\t\t});\n\t// \t\t} else {\n\t// \t\t\tthis.setState({\n\t// \t\t\t\tcoins   : coins.concat(dataJSON)\n\t// \t\t\t});\n\t// \t\t}\n\t\t\t\n\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error)\n\t// \t}\n\t// }\t\n\n\n\tasync  updateCoins() {\nconsole.log(\"change\")\n\t\t\tconst url = \"/instruments\";\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" });\n\t\t\tconst dataJSON = await response.json();\n\t\t\t\n\t\t\t// console.log(response.status);\n\n\t\t\tthis.setState({\n\t\t\t\tcoins: dataJSON\n\t\t\t});\n\t\t} catch (error) {\n\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport  App               from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './css/style.css';\n\n\n              /////  /////\nReactDOM.render(<App />, document.getElementById('root'));\n              /////  /////\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}